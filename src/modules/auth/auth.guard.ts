import {
  CanActivate,
  ExecutionContext,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { Request } from 'express';
import { Reflector } from '@nestjs/core';
import { debug } from 'console';
import { jwtConstants } from 'src/constants/constant';
import { IS_PUBLIC_KEY } from 'src/constants/decorator';

@Injectable()
export class AuthGuard implements CanActivate {
  constructor(private jwtService: JwtService, private reflector: Reflector) { }

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const isPublic = this.reflector.getAllAndOverride<boolean>(IS_PUBLIC_KEY, [
      context.getHandler(),
      context.getClass(),
    ]);// L·∫•y metadata IS_PUBLIC_KEY t·ª´ handler ho·∫∑c class. N·∫øu isPublic l√† true, nghƒ©a l√† route n√†y kh√¥ng c·∫ßn b·∫£o v·ªá (c√¥ng khai).
    if (isPublic) {//N·∫øu route c√¥ng khai, guard tr·∫£ v·ªÅ true cho ph√©p y√™u c·∫ßu ti·∫øp t·ª•c
      // üí° See this condition
      return true;
    }

    const request = context.switchToHttp().getRequest();//L·∫•y ƒë·ªëi t∆∞·ª£ng request t·ª´ context (HTTP context).
    const token = this.extractTokenFromHeader(request);//G·ªçi ph∆∞∆°ng th·ª©c ƒë·ªÉ tr√≠ch xu·∫•t token t·ª´ header c·ªßa request.
    console.log("Request: ", context.getClass())
    if (!token) {//N·∫øu kh√¥ng c√≥ token, n√©m ra ngo·∫°i l·ªá UnauthorizedException.
      throw new UnauthorizedException();
    }
    try {
      const payload = await this.jwtService.verifyAsync(token, {//X√°c th·ª±c token kh√¥ng ƒë·ªìng b·ªô v·ªõi secret key t·ª´ jwtConstants.
        secret: jwtConstants.secret,
      });
      console.log("Payload: ", payload)
      // üí° We're assigning the payload to the request object here
      // so that we can access it in our route handlers
      request['user'] = payload;//G√°n payload v√†o ƒë·ªëi t∆∞·ª£ng request ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng trong c√°c route handlers.
      console.log('User ', request['user'])
    } catch {
      throw new UnauthorizedException();
    }
    return true;
  }

  private extractTokenFromHeader(request: Request): string | undefined {
    const [type, token] = request.headers.authorization?.split(' ') ?? [];// T√°ch chu·ªói Authorization th√†nh m·∫£ng, m·∫∑c ƒë·ªãnh l√† m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥ header Authorization.
    return type === 'Bearer' ? token : undefined;//N·∫øu lo·∫°i (type) l√† 'Bearer', tr·∫£ v·ªÅ token; n·∫øu kh√¥ng, tr·∫£ v·ªÅ undefined.
  }
}
